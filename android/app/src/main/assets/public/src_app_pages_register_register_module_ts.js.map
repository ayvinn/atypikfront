{"version":3,"file":"src_app_pages_register_register_module_ts.js","mappings":"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","sources":["./src/app/pages/register/register.component.ts","./src/app/pages/register/register.module.ts","./src/app/pages/register/register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { matchingPasswords, emailValidator } from 'src/app/theme/utils/app-validators';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public registerForm: FormGroup;\r\n  public hide = true;\r\n\r\n  constructor(public fb: FormBuilder, public router: Router, public snackBar: MatSnackBar, public user: UserService) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.fb.group({\r\n      firstname: ['', Validators.required],\r\n      lastname: ['', Validators.required],\r\n      email: ['', Validators.compose([Validators.required, emailValidator])],\r\n      password: ['', Validators.required],\r\n      confirmPassword: ['', Validators.required],\r\n      receiveNewsletter: false\r\n    }, { validator: matchingPasswords('password', 'confirmPassword') });\r\n  }\r\n\r\n  public onRegisterFormSubmit(values: Object): void {\r\n    if (this.registerForm.valid) {\r\n      const values = {\r\n        email: this.registerForm.value.email, password: this.registerForm.value.password,\r\n        passwordConfirm: this.registerForm.value.confirmPassword, lastname: this.registerForm.value.lastname, firstname: this.registerForm.value.firstname,\r\n      };\r\n      console.log(values);\r\n      this.user.register(values).subscribe(\r\n        data => {\r\n          if (data) {\r\n            this.snackBar.open('You registered successfully!', '×', { panelClass: 'success', verticalPosition: 'top', duration: 3000 });\r\n            window.location.href = '/';\r\n          }\r\n          else\r\n            this.snackBar.open('Erreur', '×', { panelClass: 'error', verticalPosition: 'top', duration: 3000 });\r\n        },\r\n        (error) => {\r\n          this.snackBar.open('Erreur', '×', { panelClass: 'error', verticalPosition: 'top', duration: 3000 });\r\n        }\r\n      \r\n      );\r\n    } \r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: RegisterComponent, pathMatch: 'full'  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [RegisterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    SharedModule\r\n  ]\r\n})\r\nexport class RegisterModule { }\r\n","export default \"<div class=\\\"p-3\\\">\\r\\n    <div class=\\\"theme-container\\\">\\r\\n  \\r\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"my-3\\\">\\r\\n          <mat-card [style.max-width.px]=\\\"500\\\">\\r\\n            <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">  \\r\\n              <h1 class=\\\"uppercase\\\">S'inscrire</h1>  \\r\\n              <a mat-button routerLink=\\\"/login\\\" color=\\\"accent\\\" class=\\\"w-100\\\">Vous avez déjà un compte? S'identifier!</a>  \\r\\n            </div>\\r\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegisterFormSubmit(registerForm.value)\\\"> \\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">person</mat-icon>\\r\\n                    <mat-label>Prénom</mat-label>\\r\\n                    <input matInput placeholder=\\\"Nom\\\" formControlName=\\\"lastname\\\" required>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.lastname.errors?.required\\\">Nom Obligatoire</mat-error>\\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">person</mat-icon>\\r\\n                    <mat-label>Nom</mat-label>\\r\\n                    <input matInput placeholder=\\\"Prénom\\\" formControlName=\\\"firstname\\\" required>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.firstname.errors?.required\\\">Prénom Obligatoire</mat-error>               \\r\\n                </mat-form-field>\\r\\n\\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">email</mat-icon>\\r\\n                    <mat-label>Email</mat-label>\\r\\n                    <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.email.errors?.required\\\">Email est obligatoire</mat-error>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.email.hasError('invalidEmail')\\\">L'Email est invalide</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                  <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\r\\n                  <mat-label>Mot de passe</mat-label>\\r\\n                  <input matInput placeholder=\\\"Mot de passe\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\" required [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.password.errors?.required\\\">Le mot de passe est obligatoire</mat-error>\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.password.hasError('minlength')\\\">Le mot de passe n'est pas assez long, minimum 6 caractères</mat-error>\\r\\n                  <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\r\\n                      <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                  </button>\\r\\n                </mat-form-field> \\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                  <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\r\\n                  <mat-label>Confirmer le mot de passe</mat-label>\\r\\n                  <input matInput placeholder=\\\"Confirmer le mot de passe\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\" required [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.errors?.required\\\">La confirmation du mot de passe est obligatoire</mat-error>\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.hasError('mismatchedPasswords')\\\">Les mots de passe ne sont pas identiques</mat-error>\\r\\n                  <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\r\\n                      <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                  </button>\\r\\n                </mat-form-field> \\r\\n                <!--<mat-slide-toggle formControlName=\\\"receiveNewsletter\\\" class=\\\"my-2\\\">Recevoir les Newsletter</mat-slide-toggle>-->\\r\\n                <div class=\\\"text-center mt-2\\\"> \\r\\n                    <button mat-raised-button color=\\\"accent\\\" class=\\\"uppercase\\\" type=\\\"submit\\\">\\r\\n                        Créer un compte\\r\\n                    </button>\\r\\n                </div> \\r\\n            </form>\\r\\n            <div class=\\\"divider mt-4\\\"></div> \\r\\n            <mat-card-actions fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\r\\n               <small class=\\\"my-3\\\">En cliquant sur le bouton \\\"Créer un compte\\\", vous acceptez nos :<a mat-button routerLink=\\\"/terms-conditions\\\" color=\\\"primary\\\" class=\\\"mx-2\\\">Termes and conditions</a> </small>\\r\\n            </mat-card-actions>\\r\\n          </mat-card>\\r\\n      </div> \\r\\n  \\r\\n    </div>\\r\\n  </div>\";"],"names":[],"sourceRoot":"webpack:///"}